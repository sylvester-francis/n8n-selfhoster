name: Test N8N Installer

on:
  push:
    branches: [main, develop, feature/*]
    paths:
      - "installer/**"
      - "tests/**"
      - ".github/workflows/test-installer.yml"
  pull_request:
    branches: [main]
    paths:
      - "installer/**"
      - "tests/**"
      - ".github/workflows/test-installer.yml"
  workflow_dispatch:
    inputs:
      test_level:
        description: "Test level (quick/full)"
        required: false
        default: "quick"
        type: choice
        options:
          - quick
          - full

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  shellcheck:
    name: ShellCheck Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Run Task-based linting
        run: |
          task test:lint

  syntax-check:
    name: Task Syntax Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Run Task syntax validation
        run: |
          task test:syntax

  quick-validation:
    name: Quick Validation Tests
    runs-on: ubuntu-latest
    needs: [shellcheck, syntax-check]
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Validate Task structure
        run: |
          echo "Checking Task structure..."
          test -f Taskfile.yml
          test -d tasks
          test -f tasks/system.yml
          test -f tasks/docker.yml
          test -f tasks/nginx.yml
          test -f tasks/n8n.yml
          test -f tasks/security.yml
          test -f tasks/backup.yml
          test -f tasks/proxmox.yml
          test -f tasks/test.yml
          echo "✅ All required task files present"

      - name: Test task functionality
        run: |
          task test:functions

  docker-test:
    name: Docker Container Test
    runs-on: ubuntu-latest
    needs: [shellcheck, syntax-check]
    strategy:
      matrix:
        ubuntu-version: ["20.04", "22.04"]
    steps:
      - uses: actions/checkout@v4

      - name: Test Task system in Ubuntu ${{ matrix.ubuntu-version }} container
        run: |
          echo "🐳 Testing Task system in Ubuntu ${{ matrix.ubuntu-version }} container..."

          # Create a test script that runs in the container
          cat > container-test.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "📦 Setting up test environment..."
          apt-get update > /dev/null 2>&1
          apt-get install -y curl git sudo lsb-release python3 python3-yaml > /dev/null 2>&1

          echo "📦 Installing Task..."
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

          echo "🔍 Running Task system tests..."
          cd /workspace

          # Test Task installation
          echo "🧪 Testing Task functionality..."
          task --version
          task --list | head -5

          # Test syntax validation
          echo "🔍 Testing syntax validation..."
          task test:syntax

          # Test dry-run functionality
          echo "🏃 Testing dry-run..."
          task dry-run || echo "Dry-run completed (expected behavior in container)"

          echo "🎉 Container test completed successfully"
          EOF

          chmod +x container-test.sh

          # Run the test in Ubuntu container
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            ubuntu:${{ matrix.ubuntu-version }} \
            bash -c "
              apt-get update > /dev/null 2>&1 && 
              apt-get install -y curl git sudo lsb-release python3 python3-yaml > /dev/null 2>&1 && 
              ./container-test.sh
            "

  vm-integration-test:
    name: Full VM Integration Test
    runs-on: ubuntu-latest
    needs: [quick-validation, docker-test]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_level == 'full'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Install multipass
        run: |
          sudo snap install multipass

      - name: Wait for multipass to be ready
        run: |
          sleep 10
          sudo multipass version

      - name: Run full installation test
        run: |
          echo "🚀 Running full installation test with multipass..."

          # Modify test script for CI environment
          cat > ci-test.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 CI/CD N8N Installer Test..."

          # Cleanup any existing VM
          multipass delete n8n-ci-test 2>/dev/null || true
          multipass purge 2>/dev/null || true

          # Create fresh VM with more time
          echo "📦 Creating Ubuntu VM..."
          multipass launch 22.04 --name n8n-ci-test --memory 4G --disk 20G --cpus 2

          # Wait longer for VM in CI
          echo "⏳ Waiting for VM to initialize..."
          sleep 60

          # Get VM IP
          VM_IP=$(multipass info n8n-ci-test | grep IPv4 | awk '{print $2}')
          echo "🌐 VM IP: $VM_IP"

          # Setup environment
          echo "📁 Setting up installation environment..."
          multipass exec n8n-ci-test -- bash -c "
              sudo apt update > /dev/null 2>&1 &&
              sudo apt install -y git curl lsb-release > /dev/null 2>&1
          "

          # Copy project files
          echo "📝 Copying project files..."
          multipass transfer Taskfile.yml n8n-ci-test:Taskfile.yml
          multipass transfer --recursive tasks/ n8n-ci-test:tasks/

          # Record start time
          START_TIME=$(date +%s)

          # Install Task and run installer with timeout
          echo "⚙️ Running N8N installer with Task (20-minute timeout)..."
          timeout 1200 multipass exec n8n-ci-test -- bash -c "
              # Install Task
              sudo sh -c '$(curl --location https://taskfile.dev/install.sh)' -- -d -b /usr/local/bin &&
              # Run installation
              sudo task install
          " || {
            echo "❌ Installation timed out or failed"
            multipass exec n8n-ci-test -- sudo tail -20 /tmp/n8n-installer.log
            exit 1
          }

          # Calculate time
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          MINUTES=$((DURATION / 60))
          SECONDS=$((DURATION % 60))

          echo "✅ Installation completed in ${MINUTES}m ${SECONDS}s"

          # Basic validation
          echo "🔍 Running post-installation validation..."
          multipass exec n8n-ci-test -- bash -c "
              task test:health-check &&
              task test:connectivity
          " || {
            echo "❌ Post-installation validation failed"
            exit 1
          }

          echo "🎉 All tests passed!"

          # Cleanup
          multipass delete n8n-ci-test
          multipass purge
          EOF

          chmod +x ci-test.sh
          sudo ./ci-test.sh

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [quick-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Run performance benchmarks
        run: |
          echo "📊 Performance benchmarking with Task..."
          task test:performance

  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: [shellcheck]
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Run security validation
        run: |
          echo "🔒 Security validation with Task..."
          task test:security

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Check README and Task documentation
        run: |
          echo "📖 Documentation validation..."

          # Check README exists and has key sections
          test -f README.md
          grep -q "Task" README.md || echo "Consider adding Task documentation to README"

          # Check Taskfile structure
          test -f Taskfile.yml
          task --list | grep -q "install" || exit 1
          task help >/dev/null || exit 1

          echo "✅ Documentation checks passed"

  notification:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs:
      [
        shellcheck,
        syntax-check,
        quick-validation,
        docker-test,
        performance-benchmark,
        security-check,
        documentation-check,
      ]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "🎉 CI/CD Pipeline Results Summary"
          echo "================================="
          echo "ShellCheck: ${{ needs.shellcheck.result }}"
          echo "Syntax Check: ${{ needs.syntax-check.result }}"
          echo "Quick Validation: ${{ needs.quick-validation.result }}"
          echo "Docker Test: ${{ needs.docker-test.result }}"
          echo "Performance Benchmark: ${{ needs.performance-benchmark.result }}"
          echo "Security Check: ${{ needs.security-check.result }}"
          echo "Documentation Check: ${{ needs.documentation-check.result }}"

          if [[ "${{ needs.shellcheck.result }}" == "success" && 
                "${{ needs.syntax-check.result }}" == "success" && 
                "${{ needs.quick-validation.result }}" == "success" && 
                "${{ needs.docker-test.result }}" == "success" ]]; then
            echo "✅ All critical tests passed!"
          else
            echo "❌ Some tests failed"
            exit 1
          fi
