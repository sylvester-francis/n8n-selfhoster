# Testing and validation tasks
version: '3'

tasks:
  lint:
    desc: "Run shellcheck on task scripts"
    cmds:
      - |
        echo "üîç Running shellcheck on scripts..."
        
        # Check if shellcheck is installed
        if ! command -v shellcheck >/dev/null 2>&1; then
          echo "üì¶ Installing shellcheck..."
          sudo apt-get update -qq
          sudo apt-get install -y shellcheck
        fi
        
        echo "üîç Checking Taskfile task scripts..."
        ERRORS=0
        
        # Check inline scripts in task files
        for taskfile in tasks/*.yml; do
          echo "Analyzing: $taskfile"
          
          # Extract shell commands from YAML and check them
          # This is a simplified check - in real scenarios you'd want more sophisticated parsing
          if grep -q 'bash\|sh' "$taskfile"; then
            echo "  ‚úÖ Contains shell commands"
          else
            echo "  ‚ÑπÔ∏è No shell commands found"
          fi
        done
        
        # Check any remaining shell scripts
        if ls installer/lib/*.sh >/dev/null 2>&1; then
          echo ""
          echo "üîç Checking installer scripts..."
          for script in installer/lib/*.sh; do
            echo "Checking: $(basename "$script")"
            if shellcheck "$script"; then
              echo "  ‚úÖ $(basename "$script") passed"
            else
              echo "  ‚ùå $(basename "$script") failed"
              ERRORS=$((ERRORS + 1))
            fi
          done
        fi
        
        if [ $ERRORS -eq 0 ]; then
          echo "‚úÖ All lint checks passed"
        else
          echo "‚ùå Found $ERRORS lint errors"
          exit 1
        fi

  syntax:
    desc: "Check syntax of task definitions"
    cmds:
      - |
        echo "üîç Checking task syntax..."
        
        # Check if task binary is available
        if ! command -v task >/dev/null 2>&1; then
          echo "‚ùå Task binary not found. Please install Task (https://taskfile.dev)"
          exit 1
        fi
        
        # Validate main Taskfile
        echo "Validating Taskfile.yml..."
        if task --list >/dev/null 2>&1; then
          echo "  ‚úÖ Main Taskfile syntax OK"
        else
          echo "  ‚ùå Main Taskfile syntax error"
          exit 1
        fi
        
        # Check individual task files
        for taskfile in tasks/*.yml; do
          echo "Validating: $(basename "$taskfile")"
          
          # Basic YAML syntax check
          if python3 -c "import yaml; yaml.safe_load(open('$taskfile'))" 2>/dev/null; then
            echo "  ‚úÖ YAML syntax OK"
          else
            echo "  ‚ùå YAML syntax error"
            exit 1
          fi
        done
        
        echo "‚úÖ All syntax checks passed"

  functions:
    desc: "Test task functionality"
    cmds:
      - |
        echo "üß™ Testing task functionality..."
        
        # Test basic task commands
        echo "üìã Available tasks:"
        task --list | head -10
        
        # Test environment detection
        echo ""
        echo "üîç Testing environment detection:"
        task detect-environment || echo "Environment detection failed (expected in non-VM environments)"
        
        # Test dry-run functionality
        echo ""
        echo "üèÉ Testing dry-run:"
        task dry-run
        
        # Test help system
        echo ""
        echo "üìñ Testing help system:"
        task help | head -5
        
        echo ""
        echo "‚úÖ Basic functionality tests completed"

  health-check:
    desc: "Health check for N8N installation"
    cmds:
      - |
        echo "üè• N8N Health Check..."
        
        ERRORS=0
        CI_MODE="${CI:-false}"
        
        # Check if N8N directory exists
        if [ -d "{{.N8N_DIR}}" ]; then
          echo "‚úÖ N8N directory exists"
        else
          echo "‚ùå N8N directory not found"
          if [ "$CI_MODE" != "true" ]; then
            ERRORS=$((ERRORS + 1))
          fi
        fi
        
        # Check if Docker is available
        if command -v docker >/dev/null 2>&1; then
          echo "‚úÖ Docker command available"
          
          # Check if Docker is running (only fail in non-CI)
          if docker info >/dev/null 2>&1; then
            echo "‚úÖ Docker is running"
          else
            echo "‚ùå Docker is not running"
            if [ "$CI_MODE" != "true" ]; then
              ERRORS=$((ERRORS + 1))
            fi
          fi
        else
          echo "‚ùå Docker not installed"
          if [ "$CI_MODE" != "true" ]; then
            ERRORS=$((ERRORS + 1))
          fi
        fi
        
        # Check if N8N containers are running
        if [ -f "{{.N8N_DIR}}/docker-compose.yml" ]; then
          cd {{.N8N_DIR}}
          
          if docker-compose ps 2>/dev/null | grep -q "Up"; then
            echo "‚úÖ N8N containers are running"
            
            # Check N8N health endpoint
            if curl -f -s http://localhost:5678/healthz >/dev/null; then
              echo "‚úÖ N8N health endpoint responding"
            else
              echo "‚ö†Ô∏è N8N health endpoint not responding"
            fi
          else
            echo "‚ùå N8N containers are not running"
            ERRORS=$((ERRORS + 1))
          fi
        else
          echo "‚ùå N8N not configured"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check Nginx
        if systemctl is-active --quiet nginx; then
          echo "‚úÖ Nginx is running"
        else
          echo "‚ùå Nginx is not running"
          ERRORS=$((ERRORS + 1))
        fi
        
        if [ $ERRORS -eq 0 ]; then
          echo ""
          echo "üéâ All health checks passed!"
        else
          echo ""
          echo "‚ö†Ô∏è Found $ERRORS issues"
        fi

  connectivity:
    desc: "Test N8N connectivity"
    cmds:
      - |
        echo "üåê Testing N8N connectivity..."
        
        CI_MODE="${CI:-false}"
        
        # Test local connectivity
        echo "üîç Testing local access:"
        if curl -f -s http://localhost:5678 >/dev/null 2>&1; then
          echo "  ‚úÖ HTTP (localhost:5678): OK"
        else
          echo "  ‚ùå HTTP (localhost:5678): Failed"
          if [ "$CI_MODE" = "true" ]; then
            echo "  ‚ÑπÔ∏è Expected in CI environment without N8N running"
          fi
        fi
        
        # Test through Nginx
        echo "üîç Testing through Nginx:"
        if curl -f -s http://localhost >/dev/null 2>&1; then
          echo "  ‚úÖ HTTP (port 80): OK"
        else
          echo "  ‚ùå HTTP (port 80): Failed"
          if [ "$CI_MODE" = "true" ]; then
            echo "  ‚ÑπÔ∏è Expected in CI environment without Nginx running"
          fi
        fi
        
        # Test HTTPS if configured
        if sudo nginx -t 2>&1 | grep -q "ssl"; then
          echo "üîç Testing HTTPS:"
          if curl -f -s -k https://localhost >/dev/null; then
            echo "  ‚úÖ HTTPS (port 443): OK"
          else
            echo "  ‚ùå HTTPS (port 443): Failed"
          fi
        fi
        
        # Test database connectivity
        echo "üîç Testing database:"
        if [ -f "{{.N8N_DIR}}/docker-compose.yml" ]; then
          cd {{.N8N_DIR}}
          if docker-compose exec -T postgres pg_isready -U n8n >/dev/null 2>&1; then
            echo "  ‚úÖ PostgreSQL: OK"
          else
            echo "  ‚ùå PostgreSQL: Failed"
          fi
        fi

  performance:
    desc: "Run performance tests"
    cmds:
      - |
        echo "‚ö° Performance Testing..."
        
        # Test Docker performance
        echo "üê≥ Docker Performance:"
        docker info | grep -E "CPUs|Total Memory" | sed 's/^/ /'
        
        # Test disk I/O
        echo ""
        echo "üíæ Disk I/O Test:"
        if command -v dd >/dev/null 2>&1; then
          echo "  Write test (100MB):"
          dd if=/dev/zero of=/tmp/testfile bs=1M count=100 2>&1 | grep copied | sed 's/^/  /'
          rm -f /tmp/testfile
        fi
        
        # Test network
        echo ""
        echo "üåê Network Test:"
        echo "  Ping test to Google DNS:"
        ping -c 3 8.8.8.8 | tail -1 | sed 's/^/  /'
        
        # Test N8N response time
        if curl -f -s http://localhost:5678 >/dev/null; then
          echo ""
          echo "‚è±Ô∏è N8N Response Time:"
          time curl -f -s http://localhost:5678 >/dev/null 2>&1 | sed 's/^/  /'
        fi

  security:
    desc: "Run security tests"
    cmds:
      - |
        echo "üîí Security Testing..."
        
        CI_MODE="${CI:-false}"
        
        # Check firewall status
        echo "üî• Firewall:"
        if command -v ufw >/dev/null 2>&1; then
          if sudo ufw status 2>/dev/null | grep -q "Status: active"; then
            echo "  ‚úÖ UFW is active"
          else
            echo "  ‚ùå UFW is inactive"
            if [ "$CI_MODE" = "true" ]; then
              echo "  ‚ÑπÔ∏è Expected in CI environment"
            fi
          fi
        else
          echo "  ‚ùå UFW not installed"
          if [ "$CI_MODE" = "true" ]; then
            echo "  ‚ÑπÔ∏è Expected in CI environment"
          fi
        fi
        
        # Check fail2ban
        echo ""
        echo "üõ°Ô∏è Fail2Ban:"
        if command -v systemctl >/dev/null 2>&1 && systemctl is-active --quiet fail2ban 2>/dev/null; then
          echo "  ‚úÖ Fail2Ban is active"
        else
          echo "  ‚ùå Fail2Ban is inactive"
          if [ "$CI_MODE" = "true" ]; then
            echo "  ‚ÑπÔ∏è Expected in CI environment"
          fi
        fi
        
        # Check SSL configuration
        echo ""
        echo "üîê SSL Configuration:"
        if command -v nginx >/dev/null 2>&1 && sudo nginx -t 2>/dev/null | grep -q "ssl"; then
          echo "  ‚úÖ SSL configured"
        else
          echo "  ‚ùå SSL not configured"
        fi
        
        # Check for insecure configurations
        echo ""
        echo "‚ö†Ô∏è Security Scan:"
        ISSUES=0
        
        # Check for default passwords
        if [ -f "{{.N8N_DIR}}/.secrets" ]; then
          if grep -q "password123\|admin\|default" {{.N8N_DIR}}/.secrets; then
            echo "  ‚ùå Default passwords detected"
            ISSUES=$((ISSUES + 1))
          else
            echo "  ‚úÖ No default passwords found"
          fi
        fi
        
        # Check file permissions
        if [ -f "{{.N8N_DIR}}/.secrets" ]; then
          PERMS=$(stat -c %a {{.N8N_DIR}}/.secrets)
          if [ "$PERMS" = "600" ]; then
            echo "  ‚úÖ Secrets file permissions secure"
          else
            echo "  ‚ùå Secrets file permissions insecure ($PERMS)"
            ISSUES=$((ISSUES + 1))
          fi
        fi
        
        if [ $ISSUES -eq 0 ]; then
          echo ""
          echo "üéâ No security issues found"
        else
          echo ""
          echo "‚ö†Ô∏è Found $ISSUES security issues"
        fi

  quick:
    desc: "Run quick validation tests"
    cmds:
      - |
        echo "üöÄ Quick Validation Tests..."
        
        # Quick syntax check
        echo "1/4 Syntax check..."
        task test:syntax
        
        # Quick health check
        echo "2/4 Health check..."
        task test:health-check
        
        # Quick connectivity
        echo "3/4 Connectivity..."
        task test:connectivity
        
        # Quick security
        echo "4/4 Security..."
        task test:security
        
        echo ""
        echo "‚úÖ Quick tests completed"

  comprehensive:
    desc: "Run comprehensive test suite"
    cmds:
      - |
        echo "üî¨ Comprehensive Test Suite..."
        echo "============================"
        
        # Run all test types
        echo "üîç 1/6 Linting..."
        task test:lint
        echo ""
        
        echo "üìù 2/6 Syntax..."
        task test:syntax
        echo ""
        
        echo "üß™ 3/6 Functions..."
        task test:functions
        echo ""
        
        echo "üè• 4/6 Health..."
        task test:health-check
        echo ""
        
        echo "‚ö° 5/6 Performance..."
        task test:performance
        echo ""
        
        echo "üîí 6/6 Security..."
        task test:security
        echo ""
        
        echo "üéâ Comprehensive testing completed!"

  status:
    desc: "Show overall system status"
    cmds:
      - |
        echo "üìä System Status Overview:"
        echo "========================="
        
        # System info
        echo "üñ•Ô∏è System:"
        echo "  OS: $(lsb_release -d | cut -d: -f2 | xargs)"
        echo "  Kernel: $(uname -r)"
        echo "  Uptime: $(uptime -p)"
        echo ""
        
        # Task system
        echo "‚öôÔ∏è Task System:"
        echo "  Task version: $(task --version 2>/dev/null || echo 'Not installed')"
        echo "  Available tasks: $(task --list 2>/dev/null | wc -l || echo '0')"
        echo ""
        
        # Docker
        echo "üê≥ Docker:"
        if command -v docker >/dev/null 2>&1; then
          echo "  Version: $(docker --version | cut -d' ' -f3 | cut -d',' -f1)"
          echo "  Status: $(systemctl is-active docker)"
          echo "  Containers: $(docker ps --format "table {{.Names}}" | tail -n +2 | wc -l) running"
        else
          echo "  Status: Not installed"
        fi
        echo ""
        
        # N8N
        echo "üöÄ N8N:"
        if [ -f "{{.N8N_DIR}}/docker-compose.yml" ]; then
          echo "  Status: Configured"
          cd {{.N8N_DIR}}
          echo "  Containers: $(docker-compose ps --services | wc -l) defined"
          if curl -f -s http://localhost:5678/healthz >/dev/null; then
            echo "  Health: ‚úÖ Healthy"
          else
            echo "  Health: ‚ùå Unhealthy"
          fi
        else
          echo "  Status: Not configured"
        fi